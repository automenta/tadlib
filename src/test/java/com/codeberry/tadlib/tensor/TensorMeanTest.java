package com.codeberry.tadlib.tensor;

import com.codeberry.tadlib.provider.ProviderStore;
import com.codeberry.tadlib.provider.opencl.OpenCLProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static com.codeberry.tadlib.array.TArrayFactory.onesShaped;
import static com.codeberry.tadlib.util.MatrixTestUtils.assertEqualsMatrix;
import static com.codeberry.tadlib.util.StringUtils.toJson;

public class TensorMeanTest {
    @BeforeEach
    public void init() {
//        ProviderStore.setProvider(new JavaProvider()); enableMultiThreading();
        ProviderStore.setProvider(new OpenCLProvider());
    }

    @Test
    public void mean() {
        Tensor input = new Tensor(ProviderStore.array(new double[]{
                0.01, 0.1, -1,
                1, 10, -2,
                0.02, 0.2, -3,
                2, 20, -4,
                0.03, 0.3, -5,
                3, 30, -6,
                0.04, 0.4, -7,
                4, 40, -8
        }).reshape(2, 2, 2, 3));

        System.out.println(toJson(input.getVals().toDoubles()));

        Tensor mean = Ops.mean(input, 0, 1, 2);
        mean.backward(onesShaped(3));

        assertEqualsMatrix(ProviderStore.array(new double[]{
                        (0.01 + 1 + 0.02 + 2 + 0.03 + 3 + 0.04 + 4) / 8,
                        (0.1 + 10 + 0.2 + 20 + 0.3 + 30 + 0.4 + 40) / 8,
                        (-1. - 2 - 3 - 4 - 5 - 6 - 7 - 8) / 8
                }).toDoubles(),
                mean.getVals().toDoubles());
        assertEqualsMatrix(ProviderStore.array(new double[]{
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8,
                        1.0 / 8, 1.0 / 8, 1.0 / 8
                }).reshape(2, 2, 2, 3).toDoubles(),
                input.getGradient().toDoubles());
    }

    @Test
    public void mean2() {
        Tensor input = new Tensor(ProviderStore.array(new double[]{
                0.01, 0.1, -1,
                1, 10, -2,

                0.02, 0.2, -3,
                2, 20, -4,

                0.03, 0.3, -5,
                3, 30, -6,

                0.04, 0.4, -7,
                4, 40, -8
        }).reshape(2, 2, 2, 3));

        Tensor mean = Ops.mean(input, 0, 2, 3);
        mean.backward(ProviderStore.array(new double[]{10, 20}));

        assertEqualsMatrix(ProviderStore.array(new double[]{
                        (0.01 + 0.1 + -1 +
                                1 + 10 + -2 +
                                0.03 + 0.3 + -5 +
                                3 + 30 + -6) / 12,

                        (0.02 + 0.2 + -3 +
                                2 + 20 + -4 +
                                0.04 + 0.4 + -7 +
                                4 + 40 + -8) / 12
                }).toDoubles(),
                mean.getVals().toDoubles());
        assertEqualsMatrix(ProviderStore.array(new double[]{
                        10.0 / 12, 10.0 / 12, 10.0 / 12,
                        10.0 / 12, 10.0 / 12, 10.0 / 12,

                        20.0 / 12, 20.0 / 12, 20.0 / 12,
                        20.0 / 12, 20.0 / 12, 20.0 / 12,

                        10.0 / 12, 10.0 / 12, 10.0 / 12,
                        10.0 / 12, 10.0 / 12, 10.0 / 12,

                        20.0 / 12, 20.0 / 12, 20.0 / 12,
                        20.0 / 12, 20.0 / 12, 20.0 / 12
                }).reshape(2, 2, 2, 3).toDoubles(),
                input.getGradient().toDoubles());

    }

    @Test
    public void mean_GeneratedWithTf() {
        Tensor input = new Tensor(ProviderStore.array(new double[]{
                0.9670298, 0.5472323, 0.9726844, 0.714816, 0.6977288, 0.2160895,
                0.97627443, 0.00623026, 0.25298235, 0.43479154, 0.77938294, 0.19768508,
                0.86299324, 0.9834007, 0.16384225, 0.59733397, 0.0089861, 0.3865713,
                0.04416006, 0.95665294, 0.43614665, 0.9489773, 0.78630596, 0.8662893,
                0.17316543, 0.07494859, 0.6007427, 0.16797218, 0.73338014, 0.40844387,
                0.5279088, 0.9375716, 0.52169615, 0.10819338, 0.1582234, 0.5452027,
                0.5244041, 0.63761026, 0.40149546, 0.6498051, 0.3969, 0.6239161,
                0.767405, 0.17897391, 0.37557578, 0.5025331, 0.6866671, 0.25367966,
                0.55474085, 0.62493086, 0.89550114, 0.3628536, 0.6375571, 0.19144641,
                0.49779412, 0.1824454, 0.91838306, 0.43182206, 0.8301881, 0.4167763,
                0.9046676, 0.4048252, 0.3311745, 0.5721388, 0.84544367, 0.8610143,
                0.5956881, 0.08466161, 0.5972666, 0.24545372, 0.7325935, 0.8946513,
                0.51473397, 0.6035635, 0.06506781, 0.5400747, 0.12918678, 0.61456287,
                0.36365035, 0.767758, 0.04853414, 0.10981812, 0.6840232, 0.5146537,
                0.5716414, 0.84370697, 0.48773763, 0.8101444, 0.51024365, 0.9267207,
                0.66692775, 0.14872684, 0.36455318, 0.8657749, 0.3502852, 0.18902576,
                0.47262132, 0.39278117, 0.6189299, 0.4367663, 0.26092216, 0.41247222,
                0.41903403, 0.90242183, 0.9796163, 0.62356883, 0.08318412, 0.7329987,
                0.6786854, 0.82602286, 0.34745133, 0.05888009, 0.61182183, 0.12401462,
                0.75952953, 0.79442334, 0.4086268, 0.9437975, 0.1737798, 0.9425858
        }).reshape(3, 5, 2, 4));

        Tensor mean = Ops.mean(input, 0, 1, 2);
        mean.backward(ProviderStore.array(new double[]{
                1, 2, 3, 4
        }));

        assertEqualsMatrix(ProviderStore.array(new double[]{
                        0.5320078, 0.5306335, 0.52558774, 0.51413995
                }).toDoubles(),
                mean.getVals().toDoubles());
        assertEqualsMatrix(ProviderStore.array(new double[]{
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334,
                        0.03333334, 0.06666667, 0.1, 0.13333334, 0.03333334, 0.06666667, 0.1, 0.13333334
                }).reshape(3, 5, 2, 4).toDoubles(),
                input.getGradient().toDoubles());
    }
}
